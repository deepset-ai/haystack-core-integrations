# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# changelog header
header = """
# Changelog\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    {#
        Skip the whole section if it contains only a single commit
        and it's the commit that updated the changelog.
        If we don't do this we get an empty section since we don't show
        commits that update the changelog
    #}\
    {% if commits | length == 1 and commits[0].message == 'Update the changelog' %}\
        {% continue %}\
    {% endif %}\
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}\
        {#
            Skip commits that update the changelog, they're not useful to the user
        #}\
        {% if commit.message == 'Update the changelog' %}\
            {% continue %}\
        {% endif %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {#
                We first try to render the conventional commit message if present.
                If it's not a conventional commit we get the PR title if present.
                If the commit is neither conventional, nor has a PR title set
                we fallback to whatever the commit message is.

                We do this cause when merging PRs with multiple commits that don't
                have a title following conventional commit guidelines we might get
                a commit message that is multiple lines. That makes the changelog
                look a bit funky so we handle it like so.
            #}\
            {% if commit.conventional %}\
                {{ commit.message | upper_first }}\
            {% elif commit.remote.pr_title %}\
                {{ commit.remote.pr_title | upper_first }} (#{{ commit.remote.pr_number }})\
            {% else %}\
                {{ commit.message | upper_first }}\
            {% endif %}\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
    # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # Replace issue numbers
    #{ pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"},
    # Check spelling of the commit with https://github.com/crate-ci/typos
    # If the spelling is incorrect, it will be automatically fixed.
    #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "<!-- 00 -->🚀 Features" },
    { message = "^fix", group = "<!-- 01 -->🐛 Bug Fixes" },
    { message = "^refactor", group = "<!-- 02 -->🚜 Refactor" },
    { message = "^doc", group = "<!-- 03 -->📚 Documentation" },
    { message = "^perf", group = "<!-- 04 -->⚡ Performance" },
    { message = "^style", group = "<!-- 05 -->🎨 Styling" },
    { message = "^test", group = "<!-- 06 -->🧪 Testing" },
    { body = ".*security", group = "<!-- 07 -->🛡️ Security" },
    { message = "^revert", group = "<!-- 08 -->◀️ Revert" },
    { message = "^ci", group = "<!-- 09 -->⚙️ CI" },
    { message = "^chore", group = "<!-- 10 -->🧹 Chores" },
    { message = ".*", group = "<!-- 11 -->🌀 Miscellaneous" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
# tag_pattern = "v[0-9].*"
# regex for skipping tags
# skip_tags = ""
# regex for ignoring tags
# ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42

[remote.github]
owner = "deepset-ai"
repo = "haystack-core-integrations"
