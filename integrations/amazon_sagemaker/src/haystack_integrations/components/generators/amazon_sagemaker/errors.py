from typing import Optional


class SagemakerError(Exception):
    """
    Error generated by the Amazon Sagemaker integration.
    """

    def __init__(
        self,
        message: Optional[str] = None,
    ):
        super().__init__()
        if message:
            self.message = message

    def __getattr__(self, attr):
        # If self.__cause__ is None, it will raise the expected AttributeError
        getattr(self.__cause__, attr)

    def __str__(self):
        return self.message

    def __repr__(self):
        return str(self)


class AWSConfigurationError(SagemakerError):
    """Exception raised when AWS is not configured correctly"""

    def __init__(self, message: Optional[str] = None):
        super().__init__(message=message)


class SagemakerNotReadyError(SagemakerError):
    """Exception for issues that occur during Sagemaker inference"""

    def __init__(self, message: Optional[str] = None):
        super().__init__(message=message)


class SagemakerInferenceError(SagemakerError):
    """Exception for issues that occur during Sagemaker inference"""

    def __init__(self, message: Optional[str] = None):
        super().__init__(message=message)
