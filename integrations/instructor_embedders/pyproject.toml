[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "instructor-embedders-haystack"
dynamic = ["version"]
description = 'Haystack 2.x component to embed strings and Documents using Instructor embedding model.'
readme = "README.md"
requires-python = ">=3.9"
license = "Apache-2.0"
keywords = []
authors = [{ name = "deepset GmbH", email = "info@deepset.ai" }]
classifiers = [
  "License :: OSI Approved :: Apache Software License",
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "haystack-ai",

  # The following dependencies are copied from https://github.com/xlang-ai/instructor-embedding/blob/main/requirements.txt
  # since the InstructorEmbedding package does not install them, but they are mandatory.
  "transformers>=4.20,<5.0",
  "datasets>=2.20,<3.0",
  "pyarrow>=17.0,<18.0",
  "requests>=2.26,<3.0", 
  "sentence-transformers>=3.0.1,<4.0",
  "torch>=2.0",
  "tqdm>=4.0,<5.0",
  "rich>=13.0,<14.0",
  "huggingface-hub>=0.24.1",

  # the following dependencies were included in requirements but they are direct dependencies of sentence-transformers
  # and relying on it for installing them is better. Otherwise, we should also take care of distutils removal in 3.12.
  # Final users are still free to restrict the versions of these dependencies to their own needs.
  #  "scipy>=1.14,<2.0",
  #  "numpy>=1.0,<=1.26.4", # also a dependency of scipy
  #  "scikit_learn>=1.0.2,<2.0"

  "InstructorEmbedding",
]

[project.optional-dependencies]
dev = ["pytest"]

[project.urls]
Documentation = "https://github.com/deepset-ai/haystack-core-integrations/tree/main/integrations/instructor_embedders#readme"
Issues = "https://github.com/deepset-ai/haystack-core-integrations/issues"
Source = "https://github.com/deepset-ai/haystack-core-integrations/tree/main/integrations/instructor_embedders"

[tool.hatch.build.targets.wheel]
packages = ["src/haystack_integrations"]

[tool.hatch.version]
source = "vcs"
tag-pattern = 'integrations\/instructor_embedders-v(?P<version>.*)'

[tool.hatch.version.raw-options]
root = "../.."
git_describe_command = 'git describe --tags --match="integrations/instructor_embedders-v[0-9]*"'

[tool.hatch.envs.default]
installer = "uv"
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-rerunfailures",
  "haystack-pydoc-tools",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
test-cov-retry = "test-cov --reruns 3 --reruns-delay 30 -x"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]
cov-retry = ["test-cov-retry", "cov-report"]
docs = ["pydoc-markdown pydoc/config.yml"]

[tool.hatch.envs.lint]
installer = "uv"
detached = true
dependencies = ["pip", "black>=23.1.0", "mypy>=1.0.0", "ruff>=0.0.243"]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive --explicit-package-bases {args:src/ tests}"
style = ["ruff check {args:}", "black --check --diff {args:.}"]
fmt = ["black {args:.}", "ruff check --fix {args:}", "style"]
all = ["style", "typing"]

[tool.coverage.run]
source = ["haystack_integrations"]
branch = true
parallel = true

[tool.coverage.report]
omit = ["*/tests/*", "*/__init__.py"]
show_missing = true
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.ruff]
target-version = "py38"
line-length = 120

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["haystack_integrations"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--strict-markers"
markers = ["integration: integration tests"]
log_cli = true

[tool.black]
line-length = 120

[[tool.mypy.overrides]]
module = [
  "instructor_embedders_haystack.*",
  "InstructorEmbedding.*",
  "haystack.*",
  "haystack_integrations.*",
  "pytest.*",
  "numpy.*",
]
ignore_missing_imports = true
